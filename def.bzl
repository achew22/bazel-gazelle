# Copyright 2017 The Bazel Authors. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

load(
    "@io_bazel_rules_go//go:def.bzl",
    _go_binary = "go_binary",
    _go_context = "go_context",
    _go_rule = "go_rule",
)

# Yep -- I see that this is from private. I'm not sure how to do it better so... yep
load(
    "@io_bazel_rules_go//go/private:providers.bzl",
    "GoLibrary",
)
load("@bazel_skylib//:lib.bzl", "shell")
load("//internal:go_repository.bzl", "go_repository")
load("//internal:overlay_repository.bzl", "git_repository", "http_archive")
load("//internal:plugin.bzl", "gazelle_plugin")

# Note that GazellePlugin (the provider) must be loaded from @bazel_gazelle or it will give
# an inscrutable error messsage about not providing a mandatory provider.
# See: https://github.com/bazelbuild/bazel/issues/3115
load("@bazel_gazelle//internal:plugin.bzl", _GazellePlugin = "GazellePlugin")

def _gazelle_runner_impl(ctx):
    go = _go_context(ctx)
    args = [
        ctx.attr.command,
        "-mode",
        ctx.attr.mode,
        "-external",
        ctx.attr.external,
    ]
    if ctx.attr.prefix:
        args.extend(["-go_prefix", ctx.attr.prefix])
    if ctx.attr.build_tags:
        args.extend(["-build_tags", ",".join(ctx.attr.build_tags)])
    args.extend(ctx.attr.extra_args)

    # TODO: Do something intelligent here to detect hwne there is a Gazelle passed in
    # that isn't the default and don't build an extra one.

    main_go = ctx.actions.declare_file(ctx.label.name + ".go")
    substitutions = {
        "@@PLUGIN_IMPORTS@@": "\n\t".join(["\"%s\"" % plugin[_GazellePlugin].library[GoLibrary].importpath for plugin in ctx.attr.plugins]),
        "@@PLUGIN_LANGUAGE_INVOCATION@@": "\n\t\t".join(["%s()," % plugin[_GazellePlugin].constructor for plugin in ctx.attr.plugins]),
    }
    ctx.actions.expand_template(
        template = ctx.file._go_template,
        output = main_go,
        substitutions = substitutions,
        is_executable = True,
    )

    gazelle_library = go.new_library(go, importable = False)
    gazelle_source = go.library_to_source(go, struct(
        srcs = [struct(files = [main_go])],
        deps = [
            ctx.attr._gazelle_library,
            ctx.attr._gazelle_language_library,
        ] + [
            plugin[_GazellePlugin].library
            for plugin in ctx.attr.plugins
        ],
    ), gazelle_library, ctx.coverage_instrumented())

    gazelle_archive, gazelle_entrypoint_binary, gazelle_runfiles = go.binary(
        go,
        name = ctx.label.name + ".gazelle",
        source = gazelle_source,
        version_file = ctx.version_file,
        #gc_linkopts = gc_linkopts(ctx),
        info_file = ctx.info_file,
    )

    sh_out_file = ctx.actions.declare_file(ctx.label.name + ".bash")
    substitutions = {
        "@@ARGS@@": shell.array_literal(args),
        "@@GAZELLE_LABEL@@": shell.quote(str(ctx.attr.gazelle.label)),
        "@@GAZELLE_SHORT_PATH@@": shell.quote(gazelle_entrypoint_binary.short_path),
        "@@GENERATED_MESSAGE@@": """
# Generated by {label}
# DO NOT EDIT
""".format(label = str(ctx.label)),
        "@@RUNNER_LABEL@@": shell.quote(str(ctx.label)),
        "@@GOTOOL@@": shell.quote(go.go.path),
    }
    ctx.actions.expand_template(
        template = ctx.file._sh_template,
        output = sh_out_file,
        substitutions = substitutions,
        is_executable = True,
    )

    runfiles = ctx.runfiles(files = [
        ctx.executable.gazelle,
        gazelle_entrypoint_binary,
        # include this somehow? gazelle_runfiles,
        go.go,
    ])
    return [DefaultInfo(
        files = depset([sh_out_file]),
        runfiles = runfiles,
        executable = sh_out_file,
    )]

_gazelle_runner = _go_rule(
    implementation = _gazelle_runner_impl,
    attrs = {
        "gazelle": attr.label(
            default = "@bazel_gazelle//cmd/gazelle",
            executable = True,
            cfg = "host",
        ),
        "command": attr.string(
            values = ["update", "fix"],
            default = "update",
        ),
        "mode": attr.string(
            values = ["print", "fix", "diff"],
            default = "fix",
        ),
        "external": attr.string(
            values = ["external", "vendored"],
            default = "external",
        ),
        "plugins": attr.label_list(
            providers = [_GazellePlugin],
            default = [
                # Order matters here
                "@bazel_gazelle//internal/language/go",
                "@bazel_gazelle//internal/language/proto",
            ],
        ),
        "_gazelle_library": attr.label(
            default = "@bazel_gazelle//cmd/gazelle:go_default_library",
        ),
        "_gazelle_language_library": attr.label(
            default = "@bazel_gazelle//internal/language:go_default_library",
        ),
        "build_tags": attr.string_list(),
        "prefix": attr.string(),
        "extra_args": attr.string_list(),
        "_go_template": attr.label(
            default = "@bazel_gazelle//internal:gazelle_main.go.in",
            allow_single_file = True,
        ),
        "_sh_template": attr.label(
            default = "@bazel_gazelle//internal:gazelle.bash.in",
            allow_single_file = True,
        ),
    },
    executable = True,
)

def gazelle(name, **kwargs):
    if "args" in kwargs:
        # The args attribute has special meaning for executable rules, but we
        # always want extra_args here instead.
        if "extra_args" in kwargs:
            fail("{}: both args and extra_args were provided".format(name))
        kwargs["extra_args"] = kwargs["args"]
        kwargs.pop("args")
    runner_name = name + "-runner"

    _gazelle_runner(
        name = runner_name,
        tags = ["manual"],
        **kwargs
    )
    native.sh_binary(
        name = name,
        srcs = [runner_name],
        args = ["-bazel_run"],
        tags = ["manual"],
    )
